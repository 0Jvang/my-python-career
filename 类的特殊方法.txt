print
def __str__(self):
  self.name = 'Frank'
  return self.name

sorted()
def __cmp__(self, s):
  if self.score > s.score:
    return -1
  else:
    return 1

len()
def __len__(self):
  self.num = [1,2,3]
  return len(self.num)

add()
def __add__(self, r)
  s = self + r
  return s

@property: 访问私有化属性，调用方式: 实例.属性

def score(self):
        
  return self.__score


@方法.setter: 修改私有化属性， 调用方式: 实例.属性 = 变量

@score.setter
    
def score(self, score):
        
if score < 0 or score > 100:
            
  raise ValueError('invalid score')
        
  self.__score = score

__slots__ = ('属性1', '属性2'): 限制当前类所能拥有的属性

__call__: 将实例转为函数
class Person(object):
    def __call__(self, friend):
        print 'My friend is %s...' % friend
>>>p('Tim')
My friend is Tim...